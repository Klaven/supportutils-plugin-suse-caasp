#!/bin/bash
#############################################################
# Name:        Supportconfig Plugin for SUSE CaaSP
# Description: Gathers important troubleshooting information
#              about SUSE CaaSP
# License:     GPLv2
# Author:      containers-bugowner@suse.de
# Modified:    2017 May 25
#############################################################

SVER=1.0.0
RCFILE="/usr/lib/supportconfig/resources/scplugin.rc"
LOG_LINES=10000  # 0 means include the entire file

if [ -s $RCFILE ]; then
    if ! source $RCFILE; then
        echo "ERROR: Initializing resource file: $RCFILE" >&2
        exit 1
    fi
fi

pconf_files() {
    _log_files 0 "Configuration File" "$@"
}

plog_files() {
    loglines="$1"
    shift
    _log_files "$loglines" "Log File" "$@"
}

_log_files() {
    loglines="$1" title="$2"
    shift 2

    for file in "$@"; do
        _log_file "$loglines" "$title" "$file"
    done
}

_log_file() {
    loglines="$1" title="$2" file="$3"

    case "$file" in
        *.tbz|*.bz2|*.gz|*.zip|*.xz)
            continue
            ;;
    esac

    if ! [ -f "$file" ]; then
        plugin_tag "$title" "$file - File not found"
        continue
    fi

    if [ "$loglines" -eq 0 ]; then
        plugin_tag "$title" "$file"
    else
        plugin_tag "$title" "$file - Last $loglines Lines"
    fi

    _capture "$loglines" "$file" | _capture_filter
    echo
}

_capture() {
    loglines="$1" file="$2"
    if [ "$loglines" -eq 0 ]; then
        cat "$file"
    else
        tail -"$loglines" "$file"
    fi
}

HIDDEN='<<HIDDEN BY SUPPORTCONFIG PLUGIN>>'

_capture_filter() {
    sed_args=(
        # "password": "s3kr1t",
        # "PASWORD": "s3kr1t",
        -e 's/\("\([a-z_]\+\)\?\(passw\(or\)\?d\|PASWORD\)":\? \+"\+\)[^"]\+"/\1'"$CENSORED"'"/gi'
    )
    if (( ADD_OPTION_LOGS )); then
        sed_args+=( -e 's/^M//g' )
    else
        sed_args+=(
            -e '/^[[:space:]]*#/d'
            -e '/^[[:space:]]*;/d'
            -e '/^[[:space:]]*\/\//d'
            -e 's/^M//g'
            -e '/^$/d'
        )
    fi
    sed "${sed_args[@]}"
}

check_rpm() {
        echo
        RPM_NAME=$1
        echo "#==[ Checking RPM ]=================================#"
        echo "rpm -q $RPM_NAME"
        if rpm -q $RPM_NAME &>/dev/null; then
                echo "Status: Package is installed"
                return 0
        else
                echo "Status: Package is not installed"
                return 1
        fi
}

wait_trace_on() {
        if (( $VAR_OPTION_WAIT_TRACE )); then
                OPT=$1
                case $OPT in
                -t) TEE=0; shift ;;
                *) TEE=1 ;;
                esac
                LOGGING="$@"
                WT_START=$(date +%T:%N)
                log2sys "<$WT_START> $LOGGING"
                if (( $TEE )); then
                        printf "%s" "    <$WT_START> $LOGGING  " | tee -a ${LOG}/${CSFILE}
                else
                        printf "%s" "    <$WT_START> $LOGGING  "
                fi
        fi
}

wait_trace_off() {
        if (( $VAR_OPTION_WAIT_TRACE )); then
                OPT=$1
                case $OPT in
                -t) TEE=0 ;;
                *) TEE=1 ;;
                esac
                WT_END=$(date +%T:%N)
                if (( $TEE )); then
                        echo "<$WT_END>" | tee -a ${LOG}/${CSFILE}
                else
                        echo "<$WT_END>"
                fi
        fi
}

# Input: logfilename command
log_cmd() {
        EXIT_STATUS=0
        LOGFILE=$LOG/$1
        shift
        CMDLINE_ORIG="$@"
        CMDBIN=$(echo $CMDLINE_ORIG | awk '{print $1}')
        CMD=$(\which $CMDBIN 2>/dev/null | awk '{print $1}')
        echo "#==[ Command ]======================================#" >> $LOGFILE
        if [ -x "$CMD" ]; then
                CMDLINE=$(echo $CMDLINE_ORIG | sed -e "s!${CMDBIN}!${CMD}!")
                echo "# $CMDLINE" >> $LOGFILE
                wait_trace_on "$CMDLINE"
                echo "$CMDLINE" | bash  >> $LOGFILE 2>&1
                EXIT_STATUS=$?
                wait_trace_off
        else
                echo "# $CMDLINE_ORIG" >> $LOGFILE
                echo "ERROR: Command not found or not executible" >> $LOGFILE
                EXIT_STATUS=1
        fi
        echo >> $LOGFILE
        return $EXIT_STATUS
}

# Input: logfilename rpm
# Assumes the rpm is installed and $LOG/$RPMFILE has been created
rpm_verify() {
        RPMPATH=$LOG/$RPMFILE
        LOGFILE=$LOG/$1
        INPUT_RPM=$2
        echo "#==[ Verification ]=================================#" >> $LOGFILE
        if rpm -q $INPUT_RPM &>/dev/null
        then
                for RPM in $(rpm -q $INPUT_RPM)
                do
                        echo "# rpm -V $RPM" >> $LOGFILE
                        wait_trace_on "rpm -V $RPM"
                        rpm -V $RPM >> $LOGFILE 2>&1
                        ERR=$?
                        wait_trace_off
                        if [ $ERR -gt 0 ]; then
                                echo "# Verification Status: Differences Found" >> $LOGFILE
                        else
                                echo "# Verification Status: Passed" >> $LOGFILE
                        fi
                        echo >> $LOGFILE
                done
                #cat $RPMPATH | grep "^$INPUT_RPM " >> $LOGFILE
                #echo >> $LOGFILE
                return 0
        else
                echo "# RPM Not Installed: $INPUT_RPM" >> $LOGFILE
                echo >> $LOGFILE
                return 1
        fi
}

#############################################################
section_header "Supportconfig Plugin for SUSE CaaSP, v${SVER}"
# The plugin already hardcodes a reference to this directory above, so we're
# not introducing a new coupling with .spec files by using this absolute path here.

_find_uncompressed () {
    find "$@" ! -name \*.gz ! -name \*.bz2 ! -name \*.xz ! -name \*.key ! -name \*.crt ! -name \*.pub ! -name \*.pem
}

find_and_pconf_files () {
    [ -d "$1" ] || return 0
    files=$( _find_uncompressed "$@" )
    if [ -n "$files" ]; then
        pconf_files $files
    fi
}

find_and_plog_files () {
    [ -d "$1" ] || return 0
    files=$( _find_uncompressed "$@" )
    if [ -n "$files" ]; then
        plog_files "$LOG_LINES" $files
    fi
}

find_and_plog_files_0 () {
    [ -d "$1" ] || return 0
    files=$( _find_uncompressed "$@" )
    if [ -n "$files" ]; then
        plog_files 0 $files
    fi
}

#############################################################
section_header "Flanneld..."
if check_rpm flannel && [ -e /usr/sbin/flanneld ]; then
    validate_rpm flannel
    plugin_command 'flanneld -version'
    plugin_command 'systemctl status flanneld.service'
    plugin_command 'journalctl -u flanneld'
    pconf_files /etc/sysconfig/flanneld
fi
plugin_message Done

#############################################################
section_header "Etcd..."
if check_rpm etcd && [ -e /usr/bin/etcdctl ]; then
    validate_rpm etcd
    plugin_command 'etcdctl --version'
    plugin_command 'etcdctl member list'
    plugin_command 'etcdctl cluster-health'
    plugin_command 'etcdctl get /flannel/network/config'
    plugin_command 'etcdctl ls /flannel/network/subnets'
    plugin_command 'systemctl status etcd.service'
    plugin_command 'journalctl -u etcd'
    pconf_files /etc/sysconfig/etcd
fi
plugin_message Done

#############################################################
section_header "Kubernetes..."
KUBECTL_LOG=/var/log/kubernetes
if check_rpm kubernetes-client && [ -e /usr/bin/kubectl ]; then
    validate_rpm kubernetes-client
    plugin_command 'kubectl version'
    plugin_command 'kubectl api-versions'
    plugin_command 'kubectl config view -a'
    plugin_command 'kubectl get nodes'
    timeout 3 kubectl cluster-info dump --output-directory=$KUBECTL_LOG; echo
    find_and_plog_files_0 $KUBECTL_LOG -type f
    rm ${KUBECTL_LOG} -fr
    find_and_pconf_files /etc/kubernetes -type f
fi

if check_rpm kubernetes-master; then
    validate_rpm kubernetes-master
    for K8S_SERVICE in kube-apiserver kube-scheduler kube-controller-manager kube-proxy kubelet; do
        plugin_command "systemctl status $K8S_SERVICE"
        plugin_command "journalctl -u $K8S_SERVICE"
    done
fi
plugin_message Done

#############################################################
section_header "Salt..."
if check_rpm salt-minion && [ -e /usr/bin/salt-minion ]; then
    validate_rpm salt-minion
    plugin_command 'salt-minion --versions-report'
    plugin_command 'systemctl status salt-minion'
    plugin_command 'journalctl -u salt-minion'
    find_and_pconf_files /etc/salt -type f
    find_and_plog_files_0 /var/log/salt -type f
fi
plugin_message Done
